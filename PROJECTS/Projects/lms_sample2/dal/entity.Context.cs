//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace dal
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LMSJuly2016Entities : DbContext
    {
        public LMSJuly2016Entities()
            : base("name=LMSJuly2016Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Author> Authors { get; set; }
        public virtual DbSet<BookCategory> BookCategories { get; set; }
        public virtual DbSet<BookDetail> BookDetails { get; set; }
        public virtual DbSet<BookingDetail> BookingDetails { get; set; }
        public virtual DbSet<BookingStatu> BookingStatus { get; set; }
        public virtual DbSet<TypeOfUser> TypeOfUsers { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
    
        public virtual int sp_Delete_Authors(Nullable<int> authorId)
        {
            var authorIdParameter = authorId.HasValue ?
                new ObjectParameter("AuthorId", authorId) :
                new ObjectParameter("AuthorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Delete_Authors", authorIdParameter);
        }
    
        public virtual int sp_Delete_BookCategory(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Delete_BookCategory", categoryIDParameter);
        }
    
        public virtual int sp_Delete_BookDetails(Nullable<int> bookID)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Delete_BookDetails", bookIDParameter);
        }
    
        public virtual int sp_Delete_TYpeOfUser(Nullable<int> typeID)
        {
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Delete_TYpeOfUser", typeIDParameter);
        }
    
        public virtual int sp_Delete_UserDetails(string mID)
        {
            var mIDParameter = mID != null ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Delete_UserDetails", mIDParameter);
        }
    
        public virtual int sp_Insert_Authors(string authorName, string authorDescription)
        {
            var authorNameParameter = authorName != null ?
                new ObjectParameter("AuthorName", authorName) :
                new ObjectParameter("AuthorName", typeof(string));
    
            var authorDescriptionParameter = authorDescription != null ?
                new ObjectParameter("AuthorDescription", authorDescription) :
                new ObjectParameter("AuthorDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Authors", authorNameParameter, authorDescriptionParameter);
        }
    
        public virtual int sp_Insert_BookCategory(string categoryDesc)
        {
            var categoryDescParameter = categoryDesc != null ?
                new ObjectParameter("CategoryDesc", categoryDesc) :
                new ObjectParameter("CategoryDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_BookCategory", categoryDescParameter);
        }
    
        public virtual int sp_Insert_BookDetails(string title, Nullable<int> authorId, Nullable<int> categoryID, string edition, string publisher, Nullable<int> availability)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var authorIdParameter = authorId.HasValue ?
                new ObjectParameter("AuthorId", authorId) :
                new ObjectParameter("AuthorId", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var editionParameter = edition != null ?
                new ObjectParameter("Edition", edition) :
                new ObjectParameter("Edition", typeof(string));
    
            var publisherParameter = publisher != null ?
                new ObjectParameter("Publisher", publisher) :
                new ObjectParameter("Publisher", typeof(string));
    
            var availabilityParameter = availability.HasValue ?
                new ObjectParameter("Availability", availability) :
                new ObjectParameter("Availability", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_BookDetails", titleParameter, authorIdParameter, categoryIDParameter, editionParameter, publisherParameter, availabilityParameter);
        }
    
        public virtual int sp_Insert_BookingDetails(string mID, Nullable<System.DateTime> requestDate, Nullable<System.DateTime> acceptDate, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> returnDate, Nullable<int> statusID, Nullable<int> bookID)
        {
            var mIDParameter = mID != null ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(string));
    
            var requestDateParameter = requestDate.HasValue ?
                new ObjectParameter("RequestDate", requestDate) :
                new ObjectParameter("RequestDate", typeof(System.DateTime));
    
            var acceptDateParameter = acceptDate.HasValue ?
                new ObjectParameter("AcceptDate", acceptDate) :
                new ObjectParameter("AcceptDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_BookingDetails", mIDParameter, requestDateParameter, acceptDateParameter, dueDateParameter, returnDateParameter, statusIDParameter, bookIDParameter);
        }
    
        public virtual int sp_Insert_BookingStatus(string statusDesc)
        {
            var statusDescParameter = statusDesc != null ?
                new ObjectParameter("StatusDesc", statusDesc) :
                new ObjectParameter("StatusDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_BookingStatus", statusDescParameter);
        }
    
        public virtual int sp_Insert_TypeOfUser(string descriptionUser)
        {
            var descriptionUserParameter = descriptionUser != null ?
                new ObjectParameter("DescriptionUser", descriptionUser) :
                new ObjectParameter("DescriptionUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_TypeOfUser", descriptionUserParameter);
        }
    
        public virtual int sp_Insert_UserDetails(string mID, string name, Nullable<int> typeID, Nullable<int> phoneNo, string email)
        {
            var mIDParameter = mID != null ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var phoneNoParameter = phoneNo.HasValue ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_UserDetails", mIDParameter, nameParameter, typeIDParameter, phoneNoParameter, emailParameter);
        }
    
        public virtual int sp_Update_Authors(Nullable<int> authorId, string authorName, string authorDescription)
        {
            var authorIdParameter = authorId.HasValue ?
                new ObjectParameter("AuthorId", authorId) :
                new ObjectParameter("AuthorId", typeof(int));
    
            var authorNameParameter = authorName != null ?
                new ObjectParameter("AuthorName", authorName) :
                new ObjectParameter("AuthorName", typeof(string));
    
            var authorDescriptionParameter = authorDescription != null ?
                new ObjectParameter("AuthorDescription", authorDescription) :
                new ObjectParameter("AuthorDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_Authors", authorIdParameter, authorNameParameter, authorDescriptionParameter);
        }
    
        public virtual int sp_Update_BookCategory(Nullable<int> categoryID, string categoryDesc)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var categoryDescParameter = categoryDesc != null ?
                new ObjectParameter("CategoryDesc", categoryDesc) :
                new ObjectParameter("CategoryDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_BookCategory", categoryIDParameter, categoryDescParameter);
        }
    
        public virtual int sp_Update_BookDetails(Nullable<int> bookID, string title, Nullable<int> authorId, Nullable<int> categoryID, string edition, string publisher, Nullable<int> availability)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var authorIdParameter = authorId.HasValue ?
                new ObjectParameter("AuthorId", authorId) :
                new ObjectParameter("AuthorId", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var editionParameter = edition != null ?
                new ObjectParameter("Edition", edition) :
                new ObjectParameter("Edition", typeof(string));
    
            var publisherParameter = publisher != null ?
                new ObjectParameter("Publisher", publisher) :
                new ObjectParameter("Publisher", typeof(string));
    
            var availabilityParameter = availability.HasValue ?
                new ObjectParameter("Availability", availability) :
                new ObjectParameter("Availability", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_BookDetails", bookIDParameter, titleParameter, authorIdParameter, categoryIDParameter, editionParameter, publisherParameter, availabilityParameter);
        }
    
        public virtual int sp_Update_TYpeOfUser(Nullable<int> typeID, string descriptionUser)
        {
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var descriptionUserParameter = descriptionUser != null ?
                new ObjectParameter("DescriptionUser", descriptionUser) :
                new ObjectParameter("DescriptionUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_TYpeOfUser", typeIDParameter, descriptionUserParameter);
        }
    
        public virtual int sp_Update_UserDetails(string mID, string name, Nullable<int> typeID, Nullable<int> phoneNo, string email)
        {
            var mIDParameter = mID != null ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var phoneNoParameter = phoneNo.HasValue ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_UserDetails", mIDParameter, nameParameter, typeIDParameter, phoneNoParameter, emailParameter);
        }
    
        public virtual int sp_cancel_request(Nullable<int> bookingID)
        {
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_cancel_request", bookingIDParameter);
        }
    
        public virtual int sp_Insert_BookDetails1(string title, string authorName, string authorDescription, string categoryDesc, string edition, string publisher, Nullable<int> availability)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var authorNameParameter = authorName != null ?
                new ObjectParameter("AuthorName", authorName) :
                new ObjectParameter("AuthorName", typeof(string));
    
            var authorDescriptionParameter = authorDescription != null ?
                new ObjectParameter("AuthorDescription", authorDescription) :
                new ObjectParameter("AuthorDescription", typeof(string));
    
            var categoryDescParameter = categoryDesc != null ?
                new ObjectParameter("CategoryDesc", categoryDesc) :
                new ObjectParameter("CategoryDesc", typeof(string));
    
            var editionParameter = edition != null ?
                new ObjectParameter("Edition", edition) :
                new ObjectParameter("Edition", typeof(string));
    
            var publisherParameter = publisher != null ?
                new ObjectParameter("Publisher", publisher) :
                new ObjectParameter("Publisher", typeof(string));
    
            var availabilityParameter = availability.HasValue ?
                new ObjectParameter("Availability", availability) :
                new ObjectParameter("Availability", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_BookDetails1", titleParameter, authorNameParameter, authorDescriptionParameter, categoryDescParameter, editionParameter, publisherParameter, availabilityParameter);
        }
    
        public virtual int sp_Insert_BookingDetails1(string mID, Nullable<System.DateTime> requestDate, Nullable<System.DateTime> acceptDate, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> returnDate, string statusDesc, Nullable<int> bookID)
        {
            var mIDParameter = mID != null ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(string));
    
            var requestDateParameter = requestDate.HasValue ?
                new ObjectParameter("RequestDate", requestDate) :
                new ObjectParameter("RequestDate", typeof(System.DateTime));
    
            var acceptDateParameter = acceptDate.HasValue ?
                new ObjectParameter("AcceptDate", acceptDate) :
                new ObjectParameter("AcceptDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var statusDescParameter = statusDesc != null ?
                new ObjectParameter("StatusDesc", statusDesc) :
                new ObjectParameter("StatusDesc", typeof(string));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_BookingDetails1", mIDParameter, requestDateParameter, acceptDateParameter, dueDateParameter, returnDateParameter, statusDescParameter, bookIDParameter);
        }
    
        public virtual int sp_Insert_UserDetails1(string mID, string name, string descriptionUser, Nullable<int> phoneNo, string email)
        {
            var mIDParameter = mID != null ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionUserParameter = descriptionUser != null ?
                new ObjectParameter("DescriptionUser", descriptionUser) :
                new ObjectParameter("DescriptionUser", typeof(string));
    
            var phoneNoParameter = phoneNo.HasValue ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_UserDetails1", mIDParameter, nameParameter, descriptionUserParameter, phoneNoParameter, emailParameter);
        }
    
        public virtual int sp_request_book(string mID, Nullable<System.DateTime> requestDate, Nullable<System.DateTime> acceptDate, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> returnDate, string statusDesc, Nullable<int> bookID)
        {
            var mIDParameter = mID != null ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(string));
    
            var requestDateParameter = requestDate.HasValue ?
                new ObjectParameter("RequestDate", requestDate) :
                new ObjectParameter("RequestDate", typeof(System.DateTime));
    
            var acceptDateParameter = acceptDate.HasValue ?
                new ObjectParameter("AcceptDate", acceptDate) :
                new ObjectParameter("AcceptDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var statusDescParameter = statusDesc != null ?
                new ObjectParameter("StatusDesc", statusDesc) :
                new ObjectParameter("StatusDesc", typeof(string));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_request_book", mIDParameter, requestDateParameter, acceptDateParameter, dueDateParameter, returnDateParameter, statusDescParameter, bookIDParameter);
        }
    
        public virtual ObjectResult<sp_Requested_Booking_details_Result> sp_Requested_Booking_details()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Requested_Booking_details_Result>("sp_Requested_Booking_details");
        }
    
        public virtual int sp_return_book(Nullable<int> bookingID)
        {
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_return_book", bookingIDParameter);
        }
    
        public virtual ObjectResult<sp_Select_All_BookDetails_Result> sp_Select_All_BookDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Select_All_BookDetails_Result>("sp_Select_All_BookDetails");
        }
    
        public virtual ObjectResult<sp_Select_All_BookingDetails_Result> sp_Select_All_BookingDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Select_All_BookingDetails_Result>("sp_Select_All_BookingDetails");
        }
    
        public virtual ObjectResult<sp_Select_All_UserDetails_Result> sp_Select_All_UserDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Select_All_UserDetails_Result>("sp_Select_All_UserDetails");
        }
    
        public virtual ObjectResult<sp_select_Booked_users_Result> sp_select_Booked_users(Nullable<int> bookID)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_Booked_users_Result>("sp_select_Booked_users", bookIDParameter);
        }
    
        public virtual int cancel_request(Nullable<int> bookingID)
        {
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cancel_request", bookingIDParameter);
        }
    
        public virtual int Insert_BookDetails1(string title, string authorName, string authorDescription, string categoryDesc, string edition, string publisher, Nullable<int> availability)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var authorNameParameter = authorName != null ?
                new ObjectParameter("AuthorName", authorName) :
                new ObjectParameter("AuthorName", typeof(string));
    
            var authorDescriptionParameter = authorDescription != null ?
                new ObjectParameter("AuthorDescription", authorDescription) :
                new ObjectParameter("AuthorDescription", typeof(string));
    
            var categoryDescParameter = categoryDesc != null ?
                new ObjectParameter("CategoryDesc", categoryDesc) :
                new ObjectParameter("CategoryDesc", typeof(string));
    
            var editionParameter = edition != null ?
                new ObjectParameter("Edition", edition) :
                new ObjectParameter("Edition", typeof(string));
    
            var publisherParameter = publisher != null ?
                new ObjectParameter("Publisher", publisher) :
                new ObjectParameter("Publisher", typeof(string));
    
            var availabilityParameter = availability.HasValue ?
                new ObjectParameter("Availability", availability) :
                new ObjectParameter("Availability", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_BookDetails1", titleParameter, authorNameParameter, authorDescriptionParameter, categoryDescParameter, editionParameter, publisherParameter, availabilityParameter);
        }
    
        public virtual int Insert_BookingDetails1(string mID, Nullable<System.DateTime> requestDate, Nullable<System.DateTime> acceptDate, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> returnDate, string statusDesc, Nullable<int> bookID)
        {
            var mIDParameter = mID != null ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(string));
    
            var requestDateParameter = requestDate.HasValue ?
                new ObjectParameter("RequestDate", requestDate) :
                new ObjectParameter("RequestDate", typeof(System.DateTime));
    
            var acceptDateParameter = acceptDate.HasValue ?
                new ObjectParameter("AcceptDate", acceptDate) :
                new ObjectParameter("AcceptDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var statusDescParameter = statusDesc != null ?
                new ObjectParameter("StatusDesc", statusDesc) :
                new ObjectParameter("StatusDesc", typeof(string));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_BookingDetails1", mIDParameter, requestDateParameter, acceptDateParameter, dueDateParameter, returnDateParameter, statusDescParameter, bookIDParameter);
        }
    
        public virtual int Insert_UserDetails1(string mID, string name, string descriptionUser, Nullable<int> phoneNo, string email)
        {
            var mIDParameter = mID != null ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionUserParameter = descriptionUser != null ?
                new ObjectParameter("DescriptionUser", descriptionUser) :
                new ObjectParameter("DescriptionUser", typeof(string));
    
            var phoneNoParameter = phoneNo.HasValue ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_UserDetails1", mIDParameter, nameParameter, descriptionUserParameter, phoneNoParameter, emailParameter);
        }
    
        public virtual int Request_Book(string mID, Nullable<System.DateTime> requestDate, Nullable<System.DateTime> acceptDate, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> returnDate, string statusDesc, Nullable<int> bookID)
        {
            var mIDParameter = mID != null ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(string));
    
            var requestDateParameter = requestDate.HasValue ?
                new ObjectParameter("RequestDate", requestDate) :
                new ObjectParameter("RequestDate", typeof(System.DateTime));
    
            var acceptDateParameter = acceptDate.HasValue ?
                new ObjectParameter("AcceptDate", acceptDate) :
                new ObjectParameter("AcceptDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var statusDescParameter = statusDesc != null ?
                new ObjectParameter("StatusDesc", statusDesc) :
                new ObjectParameter("StatusDesc", typeof(string));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Request_Book", mIDParameter, requestDateParameter, acceptDateParameter, dueDateParameter, returnDateParameter, statusDescParameter, bookIDParameter);
        }
    
        public virtual ObjectResult<BookingDetail> Requested_Booking_details()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BookingDetail>("Requested_Booking_details");
        }
    
        public virtual ObjectResult<BookingDetail> Requested_Booking_details(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BookingDetail>("Requested_Booking_details", mergeOption);
        }
    
        public virtual int Return_book(Nullable<int> bookingID)
        {
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Return_book", bookingIDParameter);
        }
    
        public virtual ObjectResult<UserDetail> Select_Booked_Users(Nullable<int> bookID)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserDetail>("Select_Booked_Users", bookIDParameter);
        }
    
        public virtual ObjectResult<UserDetail> Select_Booked_Users(Nullable<int> bookID, MergeOption mergeOption)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserDetail>("Select_Booked_Users", mergeOption, bookIDParameter);
        }
    }
}
